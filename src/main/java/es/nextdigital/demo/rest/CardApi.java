/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package es.nextdigital.demo.rest;

import io.swagger.annotations.*;
import org.openapitools.model.CardConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-08T19:41:47.671017400+02:00[Europe/Madrid]")

@Validated
@Api(value = "Card", description = "the Card API")
public interface CardApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "activate card", nickname = "cardCardIdActivatePost", notes = "activate a card (cardId)", tags={ "card", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK - No content"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/card/{cardId}/activate",
        method = RequestMethod.POST)
    default ResponseEntity<Void> cardCardIdActivatePost(@ApiParam(value = "the id of the card to activate",required=true) @PathVariable("cardId") String cardId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "card configuration", nickname = "cardCardIdSecurityConfigurationGet", notes = "get the configuration of a card (cardId)", response = CardConfiguration.class, tags={ "card", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CardConfiguration.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/card/{cardId}/security/configuration",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CardConfiguration> cardCardIdSecurityConfigurationGet(@ApiParam(value = "the id of the card to activate",required=true) @PathVariable("cardId") String cardId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"withdrawLimit\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "card configuration", nickname = "cardCardIdSecurityConfigurationPatch", notes = "change the configuration of a card (cardId)", tags={ "card", })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/card/{cardId}/security/configuration",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> cardCardIdSecurityConfigurationPatch(@ApiParam(value = "the id of the card to activate",required=true) @PathVariable("cardId") String cardId,@NotNull @ApiParam(value = "the new configuration for the card", required = true) @Valid CardConfiguration cardConfiguration) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "pincode operations", nickname = "cardCardIdSecurityPinCodePost", notes = "update the pincode of a card (cardId)", tags={ "card", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK - No content"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/card/{cardId}/security/pinCode",
        method = RequestMethod.POST)
    default ResponseEntity<Void> cardCardIdSecurityPinCodePost(@ApiParam(value = "the id of the card",required=true) @PathVariable("cardId") String cardId,@NotNull @ApiParam(value = "the pincode of the card, encoded in base 64", required = true) @Valid @RequestParam(value = "pinCode", required = true) byte[] pinCode,@NotNull @ApiParam(value = "the new pincode, encoded in base 64", required = true) @Valid @RequestParam(value = "newPinCode", required = true) byte[] newPinCode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
