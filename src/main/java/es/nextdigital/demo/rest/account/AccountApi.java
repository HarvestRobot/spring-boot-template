/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package es.nextdigital.demo.rest.account;

import es.nextdigital.demo.rest.ApiUtil;
import io.swagger.annotations.*;
import org.openapitools.model.AccountMovementList;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-08T19:41:47.671017400+02:00[Europe/Madrid]")

@Validated
@Api(value = "Account", description = "the Account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "save money", nickname = "accountAccountIdOperationSavePost", notes = "save money from an account, given its id (accountId)", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK - No content"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/account/{accountId}/operation/save",
        method = RequestMethod.POST)
    default ResponseEntity<Void> accountAccountIdOperationSavePost(@ApiParam(value = "the IBAN of the account",required=true) @PathVariable("accountId") String accountId,@NotNull @ApiParam(value = "the amount of money to save", required = true) @Valid @RequestParam(value = "amount", required = true) Integer amount,@NotNull @ApiParam(value = "details of the card", required = true) @Valid @RequestParam(value = "cardDetails", required = true) Object cardDetails,@NotNull @ApiParam(value = "the id of the ATM the operation is taking place", required = true) @Valid @RequestParam(value = "atmId", required = true) String atmId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "transfer money", nickname = "accountAccountIdOperationTransferPost", notes = "transfer money from an account (accountId) to another account (toAccountId)", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK - No content"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/account/{accountId}/operation/transfer",
        method = RequestMethod.POST)
    default ResponseEntity<Void> accountAccountIdOperationTransferPost(@ApiParam(value = "the IBAN of the account",required=true) @PathVariable("accountId") String accountId,@NotNull @ApiParam(value = "the IBAN of the account to transfer money to", required = true) @Valid @RequestParam(value = "toAccountId", required = true) String toAccountId,@NotNull @ApiParam(value = "the amount of money to transfer", required = true) @Valid @RequestParam(value = "amount", required = true) Integer amount,@NotNull @ApiParam(value = "details of the card", required = true) @Valid @RequestParam(value = "cardDetails", required = true) Object cardDetails,@NotNull @ApiParam(value = "the id of the ATM the operation is taking place", required = true) @Valid @RequestParam(value = "atmId", required = true) String atmId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "withdraw money", nickname = "accountAccountIdOperationWithdrawPost", notes = "withdraw money from an account, given its id (accountId)", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK - No content"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/account/{accountId}/operation/withdraw",
        method = RequestMethod.POST)
    default ResponseEntity<Void> accountAccountIdOperationWithdrawPost(@ApiParam(value = "the IBAN of the account",required=true) @PathVariable("accountId") String accountId,@NotNull @ApiParam(value = "the amount of money to withdraw", required = true) @Valid @RequestParam(value = "amount", required = true) Integer amount,@NotNull @ApiParam(value = "details of the card", required = true) @Valid @RequestParam(value = "cardDetails", required = true) Object cardDetails,@NotNull @ApiParam(value = "the id of the ATM the operation is taking place", required = true) @Valid @RequestParam(value = "atmId", required = true) String atmId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "get account movements by their id", nickname = "accountAccountIdSummaryGet", notes = "get all the movements an account (accountId) has, searching by their type (movementTypeId)", response = AccountMovementList.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AccountMovementList.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/account/{accountId}/summary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AccountMovementList> accountAccountIdSummaryGet(@ApiParam(value = "the IBAN of the account",required=true) @PathVariable("accountId") String accountId,@ApiParam(value = "pagination parameter - the required page") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,@ApiParam(value = "pagination parameter - the size of the page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "pagination parameter - the limit of pages to return") @Valid @RequestParam(value = "pageLimit", required = false) Integer pageLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"totalItems\" : 0,  \"items\" : [ {    \"type\" : {      \"longDescription\" : \"longDescription\",      \"id\" : \"id\",      \"shortDescription\" : \"shortDescription\"    },    \"timestamp\" : \"timestamp\"  }, {    \"type\" : {      \"longDescription\" : \"longDescription\",      \"id\" : \"id\",      \"shortDescription\" : \"shortDescription\"    },    \"timestamp\" : \"timestamp\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
